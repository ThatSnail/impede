// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.CapacitorSprite = (function(superClass) {
    extend(CapacitorSprite, superClass);

    function CapacitorSprite() {
      return CapacitorSprite.__super__.constructor.apply(this, arguments);
    }

    CapacitorSprite.constructSVG = function(x, y, v) {
      var svg, toDStr;
      toDStr = function(lst) {
        return d3.svg.line().x(function(d) {
          return d.x;
        }).y(function(d) {
          return d.y;
        }).interpolate("linear")(lst);
      };
      svg = DA.svg.append("g");
      svg.append("path").attr("d", toDStr([
        {
          "x": x - Grid.getTickSize(),
          "y": y
        }, {
          "x": x - Grid.getTickSize() * 0.5,
          "y": y
        }
      ])).style("fill", "transparent").attr("stroke", "black").attr("stroke-width", 2);
      svg.append("path").attr("d", toDStr([
        {
          "x": x - Grid.getTickSize() * 0.5,
          "y": y - Grid.getTickSize() * 0.5
        }, {
          "x": x - Grid.getTickSize() * 0.5,
          "y": y + Grid.getTickSize() * 0.5
        }
      ])).style("fill", "transparent").attr("stroke", "black").attr("stroke-width", 2);
      svg.append("path").attr("d", toDStr([
        {
          "x": x + Grid.getTickSize() * 0.5,
          "y": y - Grid.getTickSize() * 0.5
        }, {
          "x": x + Grid.getTickSize() * 0.5,
          "y": y + Grid.getTickSize() * 0.5
        }
      ])).style("fill", "transparent").attr("stroke", "black").attr("stroke-width", 2);
      svg.append("path").attr("d", toDStr([
        {
          "x": x + Grid.getTickSize() * 0.5,
          "y": y
        }, {
          "x": x + Grid.getTickSize(),
          "y": y
        }
      ])).style("fill", "transparent").attr("stroke", "black").attr("stroke-width", 2);
      svg.append("circle").attr("cx", x - Grid.getTickSize()).attr("cy", y).attr("r", Grid.getTickSize() * .125).style("fill", "black").attr("stroke", "black");
      svg.append("circle").attr("cx", x + Grid.getTickSize()).attr("cy", y).attr("r", Grid.getTickSize() * .125).style("fill", "black").attr("stroke", "black");
      svg.valueText = svg.append("text").attr("x", x).attr("y", y - Grid.getTickSize()).attr("text-anchor", "middle").attr("fill", "black").classed("text", true).attr("shape-rendering", "crispEdges").style("font-size", "16px");
      svg.updateText = function(v) {
        return svg.valueText.text(v + " F");
      };
      svg.updateText(v);
      return svg;
    };

    return CapacitorSprite;

  })(Sprite);

}).call(this);
