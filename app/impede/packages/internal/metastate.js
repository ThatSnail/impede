// Generated by CoffeeScript 1.10.0
(function() {
  this.Metastate = (function() {
    var instance;

    instance = null;

    function Metastate(config) {
      this.config = config;
      if (instance) {
        return instance;
      } else {
        instance = this;
      }
      this.selected = null;
      this._ghost = null;
      this._svgs = [];
    }

    Metastate.prototype.initialize = function() {
      var DA;
      DA = window.DescArea();
      return this._ghost = DA.svg.append("svg");
    };

    Metastate.prototype.updateGhost = function(mx, my) {
      var CapacitorSprite, InductorSprite, ResistorSprite;
      if (this._ghost != null) {
        this._ghost.remove();
      }
      if (this.selected != null) {
        switch (this.selected) {
          case Elements.RESISTOR:
            ResistorSprite = window.ResistorSprite();
            return this._ghost = ResistorSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my), 0);
          case Elements.CAPACITOR:
            CapacitorSprite = window.CapacitorSprite();
            return this._ghost = CapacitorSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my), 0);
          case Elements.INDUCTOR:
            InductorSprite = window.InductorSprite();
            return this._ghost = InductorSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my), 0);
        }
      }
    };

    Metastate.prototype.addElement = function(mx, my) {
      switch (this.selected) {
        case Elements.RESISTOR:
          this.config.resistors.push([mx, my]);
      }
      this.updateSVGs();
      return this.updateConfigbox();
    };

    Metastate.prototype.removeElement = function(mx, my) {
      var Grid, State, arr, elementArrays, i, j, k, l, m, mpos, pos, ref, ref1, ref2, x;
      Grid = window.Grid;
      State = window.State;
      mpos = Grid.getGridPosNoround(mx, my);
      arr = State.config.htmls;
      for (i = k = 0, ref = arr.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        x = arr[i];
        if (Math.sqrt(Math.pow(x[0] - mpos[0], 2) + Math.pow(x[1] - mpos[1], 2)) < 1) {
          arr.splice(i, 1);
          this.updateSVGs();
          this.updateConfigbox();
          return;
        }
      }
      pos = Grid.getGridPos(mx, my);
      elementArrays = [State.config.args, State.config.results, State.config.sources, State.config.sinks, State.config.hwalls, State.config.vwalls];
      for (j = l = 0, ref1 = elementArrays.length; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
        arr = elementArrays[j];
        for (i = m = 0, ref2 = arr.length; 0 <= ref2 ? m <= ref2 : m >= ref2; i = 0 <= ref2 ? ++m : --m) {
          x = arr[i];
          if (x[0] === pos[0] && x[1] === pos[1]) {
            arr.splice(i, 1);
            this.updateSVGs();
            this.updateConfigbox();
            return;
          }
        }
      }
    };

    Metastate.prototype.updateSVGs = function() {
      this._svgs.forEach(function(svg) {
        return svg.remove();
      });
      return this._svgs = [];
    };

    Metastate.prototype.load = function(jsonStr) {
      var State;
      State = window.State;
      if (jsonStr == null) {
        jsonStr = prompt("Paste your JSON!");
      }
      if (jsonStr != null) {
        State.stop();
        State.config.fromString(jsonStr);
        this.updateSVGs();
        return this.updateConfigbox();
      }
    };

    Metastate.prototype.updateConfigbox = function() {
      var SA, State;
      SA = window.StatArea;
      State = window.State;
      return SA._configbox.text(State.config.toString());
    };

    return Metastate;

  })();

}).call(this);
