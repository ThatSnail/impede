// Generated by CoffeeScript 1.10.0
(function() {
  this.Metastate = (function() {
    var instance;

    instance = null;

    function Metastate(config) {
      this.config = config;
      if (instance) {
        return instance;
      } else {
        instance = this;
      }
      this.selected = null;
      this.value_text = "";
      this.value_unit = Units.prototype.i;
      this._mx = 0;
      this._my = 0;
      this._ghost = null;
      this._svgs = [];
      this.first_mx = null;
      this.first_my = null;
    }

    Metastate.prototype.initialize = function() {
      var DA;
      DA = window.DescArea();
      return this._ghost = DA.svg.append("svg");
    };

    Metastate.prototype.updateGhost = function(mx, my) {
      var CapacitorSprite, GroundSprite, InductorSprite, OpampSprite, ResistorSprite, VInSprite, VOutSprite, VSrcSprite, WireSprite, pos;
      if (mx == null) {
        mx = this._mx;
      }
      if (my == null) {
        my = this._my;
      }
      if (this._ghost != null) {
        this._ghost.remove();
      }
      if (this.selected != null) {
        this._mx = mx;
        this._my = my;
        switch (this.selected) {
          case Elements.RESISTOR:
            ResistorSprite = window.ResistorSprite;
            return this._ghost = ResistorSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my).concat(this.value_text));
          case Elements.CAPACITOR:
            CapacitorSprite = window.CapacitorSprite;
            return this._ghost = CapacitorSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my).concat(this.value_text));
          case Elements.INDUCTOR:
            InductorSprite = window.InductorSprite;
            return this._ghost = InductorSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my).concat(this.value_text));
          case Elements.GND:
            GroundSprite = window.GroundSprite;
            return this._ghost = GroundSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my));
          case Elements.V_SRC:
            VSrcSprite = window.VSrcSprite;
            return this._ghost = VSrcSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my).concat(this.value_text));
          case Elements.V_IN:
            VInSprite = window.VInSprite;
            return this._ghost = VInSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my));
          case Elements.V_OUT:
            VOutSprite = window.VOutSprite;
            return this._ghost = VOutSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my));
          case Elements.OPAMP:
            OpampSprite = window.OpampSprite;
            return this._ghost = OpampSprite.constructSVG.apply(this, Grid.snapToGridFloor(mx, my));
          case Elements.WIRE:
            WireSprite = window.WireSprite;
            if (this.first_mx !== null) {
              pos = Grid.snapToGrid(this.first_mx, this.first_my);
              pos = pos.concat(Grid.snapToGrid(mx, my));
              return this._ghost = WireSprite.constructSVG.apply(this, pos);
            }
        }
      }
    };

    Metastate.prototype.addElement = function(mx, my, v) {
      var pos;
      if (v == null) {
        v = 0;
      }
      switch (this.selected) {
        case Elements.RESISTOR:
          this.config.resistors.push([mx, my, v]);
          break;
        case Elements.CAPACITOR:
          this.config.capacitors.push([mx, my, v]);
          break;
        case Elements.INDUCTOR:
          this.config.inductors.push([mx, my, v]);
          break;
        case Elements.GND:
          this.config.grounds.push([mx, my]);
          break;
        case Elements.V_SRC:
          this.config.v_srcs.push([mx, my, v]);
          break;
        case Elements.V_IN:
          this.config.v_ins.push([mx, my]);
          break;
        case Elements.V_OUT:
          this.config.v_outs.push([mx, my]);
          break;
        case Elements.OPAMP:
          this.config.opamps.push([mx, my]);
          break;
        case Elements.WIRE:
          pos = Grid.snapToGrid(this.first_mx, this.first_my);
          pos = pos.concat(Grid.snapToGrid(mx, my));
          this.config.wires.push(pos);
      }
      return this.updateSVGs();
    };

    Metastate.prototype.removeElement = function(mx, my) {
      var Grid, State, arr, elementArrays, i, j, k, l, m, mpos, pos, ref, ref1, ref2, x;
      Grid = window.Grid;
      State = window.State;
      mpos = Grid.getGridPosNoround(mx, my);
      arr = State.config.htmls;
      for (i = k = 0, ref = arr.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        x = arr[i];
        if (Math.sqrt(Math.pow(x[0] - mpos[0], 2) + Math.pow(x[1] - mpos[1], 2)) < 1) {
          arr.splice(i, 1);
          this.updateSVGs();
          return;
        }
      }
      pos = Grid.getGridPos(mx, my);
      elementArrays = [State.config.args, State.config.results, State.config.sources, State.config.sinks, State.config.hwalls, State.config.vwalls];
      for (j = l = 0, ref1 = elementArrays.length; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
        arr = elementArrays[j];
        for (i = m = 0, ref2 = arr.length; 0 <= ref2 ? m <= ref2 : m >= ref2; i = 0 <= ref2 ? ++m : --m) {
          x = arr[i];
          if (x[0] === pos[0] && x[1] === pos[1]) {
            arr.splice(i, 1);
            this.updateSVGs();
            return;
          }
        }
      }
    };

    Metastate.prototype.updateSVGs = function() {
      var k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, m, n, o, p, pos, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s, v, x, x1, x2, y, y1, y2;
      this._svgs.forEach(function(svg) {
        return svg.remove();
      });
      this._svgs = [];
      ref = this.config.resistors;
      for (k = 0, len = ref.length; k < len; k++) {
        ref1 = ref[k], x = ref1[0], y = ref1[1], v = ref1[2];
        this._svgs.push(ResistorSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y).concat(v)));
      }
      ref2 = this.config.capacitors;
      for (l = 0, len1 = ref2.length; l < len1; l++) {
        ref3 = ref2[l], x = ref3[0], y = ref3[1], v = ref3[2];
        this._svgs.push(CapacitorSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y).concat(v)));
      }
      ref4 = this.config.inductors;
      for (m = 0, len2 = ref4.length; m < len2; m++) {
        ref5 = ref4[m], x = ref5[0], y = ref5[1], v = ref5[2];
        this._svgs.push(InductorSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y).concat(v)));
      }
      ref6 = this.config.grounds;
      for (n = 0, len3 = ref6.length; n < len3; n++) {
        ref7 = ref6[n], x = ref7[0], y = ref7[1];
        this._svgs.push(GroundSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y)));
      }
      ref8 = this.config.v_ins;
      for (o = 0, len4 = ref8.length; o < len4; o++) {
        ref9 = ref8[o], x = ref9[0], y = ref9[1];
        this._svgs.push(VInSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y)));
      }
      ref10 = this.config.v_outs;
      for (p = 0, len5 = ref10.length; p < len5; p++) {
        ref11 = ref10[p], x = ref11[0], y = ref11[1];
        this._svgs.push(VOutSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y)));
      }
      ref12 = this.config.opamps;
      for (q = 0, len6 = ref12.length; q < len6; q++) {
        ref13 = ref12[q], x = ref13[0], y = ref13[1];
        this._svgs.push(OpampSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y)));
      }
      ref14 = this.config.v_srcs;
      for (r = 0, len7 = ref14.length; r < len7; r++) {
        ref15 = ref14[r], x = ref15[0], y = ref15[1], v = ref15[2];
        this._svgs.push(VSrcSprite.constructSVG.apply(this, Grid.snapToGridFloor(x, y).concat(v)));
      }
      ref16 = this.config.wires;
      results = [];
      for (s = 0, len8 = ref16.length; s < len8; s++) {
        ref17 = ref16[s], x1 = ref17[0], y1 = ref17[1], x2 = ref17[2], y2 = ref17[3];
        pos = Grid.snapToGrid(x1, y1).concat(Grid.snapToGrid(x2, y2));
        results.push(this._svgs.push(WireSprite.constructSVG.apply(this, pos)));
      }
      return results;
    };

    Metastate.prototype.load = function(jsonStr) {
      var State;
      State = window.State;
      if (jsonStr == null) {
        jsonStr = prompt("Paste your JSON!");
      }
      if (jsonStr != null) {
        State.stop();
        State.config.fromString(jsonStr);
        return this.updateSVGs();
      }
    };

    Metastate.prototype.getValue = function() {
      return Units.toValue(parseFloat(this.value_text), this.value_unit);
    };

    return Metastate;

  })();

}).call(this);
