// Generated by CoffeeScript 1.10.0
(function() {
  var Grid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Grid = (function(superClass) {
    var instance;

    extend(Grid, superClass);

    instance = null;

    function Grid() {
      if (instance) {
        return instance;
      } else {
        instance = this;
      }
      this.tickCount = 26;
      this.minTickCount = 10;
      this.maxTickCount = 50;
      this.xAxisGrid = null;
      this.yAxisGrid = null;
      this.svgXLines = null;
      this.svgYLines = null;
    }

    Grid.prototype.initialize = function() {
      var DA, scale, xAxis, yAxis;
      DA = window.DescArea();
      scale = d3.scale.linear().domain([-1, 1]).range([-1, 1]);
      xAxis = d3.svg.axis().scale(scale).tickFormat("").orient("bottom");
      yAxis = d3.svg.axis().scale(scale).tickFormat("").orient("right");
      this.xAxisGrid = xAxis.tickSize(DA.h).tickValues(d3.range(0, DA.w, this.getTickSize()));
      this.yAxisGrid = yAxis.tickSize(DA.w).tickValues(d3.range(0, DA.h, this.getTickSize()));
      this.svgXLines = DA.svg.append("g").classed("grid", true).call(this.xAxisGrid);
      return this.svgYLines = DA.svg.append("g").classed("grid", true).call(this.yAxisGrid);
    };

    Grid.prototype.redraw = function() {
      var DA;
      DA = window.DescArea();
      this.xAxisGrid.tickValues(d3.range(0, DA.w, this.getTickSize()));
      this.yAxisGrid.tickValues(d3.range(0, DA.h, this.getTickSize()));
      this.svgXLines.call(this.xAxisGrid);
      return this.svgYLines.call(this.yAxisGrid);
    };

    Grid.prototype.zoomIn = function() {
      if (this.tickCount > this.minTickCount) {
        return this.tickCount--;
      }
    };

    Grid.prototype.zoomOut = function() {
      if (this.tickCount < this.maxTickCount) {
        return this.tickCount++;
      }
    };

    Grid.prototype.getTickSize = function() {
      var DA;
      DA = window.DescArea();
      return Math.min(DA.w, DA.h) / this.tickCount;
    };

    Grid.prototype.getDrawPos = function(x, y) {
      return [x * this.getTickSize(), y * this.getTickSize()];
    };

    Grid.prototype.getGridPos = function(x, y) {
      return [Math.round(x / this.getTickSize()), Math.round(y / this.getTickSize())];
    };

    Grid.prototype.getGridPosFloor = function(x, y) {
      return [Math.floor(x / this.getTickSize()), Math.floor(y / this.getTickSize())];
    };

    Grid.prototype.getGridPosNoround = function(x, y) {
      return [x / this.getTickSize(), y / this.getTickSize()];
    };

    Grid.prototype.snapToGrid = function(x, y) {
      return this.getDrawPos.apply(this, this.getGridPos(x, y));
    };

    Grid.prototype.snapToGridFloor = function(x, y) {
      return this.getDrawPos.apply(this, this.getGridPosFloor(x, y));
    };

    return Grid;

  })(Drawable);

  this.Grid = new Grid();

}).call(this);
